/**
\mainpage The ACPFTestProject CI-Project

The project demonstrates the use of the <a href="https://github.com/Knitschi/CMakeProjectFramework"><b>CMakeProjectFramework</b></a>.

The repository *owns* some packages.

- APackage (A *loose* C++ command line application package)
- CPackage (A *fixed* C++ library package)
- DPackage (A *loose* C++ library package)
- EPackage (A *loose* C++ library package)

The repository uses some external packages.

- CPFCMake (CMake package, owned by the CMakeProjectFramework)
- CPFBuildscripts (Python package, owned by the CMakeProjectFramework)
- BPackage (C++ package, owned by <a href="https://github.com/Knitschi/BCPFTestProject"><b>BCPFTestProject</b></a>)
- FPackage (C++ package, owned by BCPFTestProject)
- GPackage (C++ package, owned by BCPFTestProject)

All C++ packages contain only *Hello World* functionality.

# Target Dependency Graph #

The CPF configures CMake to generate the dependency graph of the projects binary targets. This graph visualizes
the *levelization* of your libraries and is used by the static analysis to prevent circular dependencies between
your libraries. Two versions of the dependency graph of your project are generated. The first contains all direct
and indirect dependencies, but does not display test targets. The second is the transitive reduced version of
the first graph which removes direct dependencies from the graph if an indirect dependency already exists. 
This helps with reducing visual clutter in the graph.

Here is an example how you can add the two graphs to your documentation.

\dotfile CPFDependencies.dot "Target dependency graph with all dependencies"

<br/>

\dotfile CPFDependenciesTransitiveReduced.dot "Transitive reduced target dependency graph"

*/